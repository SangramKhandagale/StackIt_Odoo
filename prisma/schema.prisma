// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String?     @unique
  password      String?     // for credentials-based signup/login
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
  questions     Question[]
  comments      Comment[]
  createdAt     DateTime    @default(now())
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  userRoles UserRole[]
}

model UserRole {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  role    Role   @relation(fields: [roleId], references: [id])
  roleId  Int

  @@id([userId, roleId])
}

model Question {
  id         Int        @id @default(autoincrement())
  title      String
  body       String
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  comments   Comment[]
  createdAt  DateTime   @default(now())
}

model Comment {
  id          Int       @id @default(autoincrement())
  body        String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  Int
  createdAt   DateTime  @default(now())
}
