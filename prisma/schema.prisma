generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  image         String?
  emailVerified DateTime?

  role Role @default(USER) // ✅ uses enum

  questions     Question[]
  comments      Comment[]
  votes         Vote[]
  notifications Notification[]
  userRoles     UserRole[] // ✅ relation to CustomRole
  Account       Account[]
  Session       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model CustomRole {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  userRoles UserRole[]
}

model UserRole {
  user   User       @relation(fields: [userId], references: [id])
  userId String
  role   CustomRole @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Question {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  imageUrl   String?
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String

  comments   Comment[]
  votes      Vote[]
  tags       Tag[]     @relation("QuestionTags")

  createdAt  DateTime  @default(now())
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[] @relation("QuestionTags")
}



model Comment {
  id         Int       @id @default(autoincrement())
  body       String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId Int?
  replies  Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
}

model Vote {
  id         Int      @id @default(autoincrement())
  value      Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@unique([questionId, userId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
